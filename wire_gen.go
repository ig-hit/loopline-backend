// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	"sync"
)

// Injectors from wire.go:

func CreateTokenMiddleware() echo.MiddlewareFunc {
	mainRegisterStore := CreateRegisterStore()
	middlewareFunc := MustHaveToken(mainRegisterStore)
	return middlewareFunc
}

func createBase(c ...string) (*BaseController, error) {
	baseController := &BaseController{}
	return baseController, nil
}

func createNotebookController(c ...string) (*NotebookController, error) {
	baseController := MustBase(c...)
	mainNotebookStore := CreateNotebookStore()
	notebookController := &NotebookController{
		BaseController: baseController,
		store:          mainNotebookStore,
	}
	return notebookController, nil
}

func createRegisterController(c ...string) (*RegisterController, error) {
	baseController := MustBase(c...)
	mainRegisterStore := CreateRegisterStore()
	registerController := &RegisterController{
		BaseController: baseController,
		store:          mainRegisterStore,
	}
	return registerController, nil
}

// wire.go:

var onceRegisterStore sync.Once

var registerStore RegisterStore

var onceNotebookStore sync.Once

var notebookStore NotebookStore

var onceBase sync.Once

var baseCtl *BaseController

func CreateRegisterStore() RegisterStore {
	onceRegisterStore.Do(func() {
		registerStore = make(RegisterStore)
	})
	return registerStore
}

func CreateNotebookStore() NotebookStore {
	onceNotebookStore.Do(func() {
		notebookStore = make(NotebookStore)
	})
	return notebookStore
}

func MustBase(c ...string) *BaseController {
	var err error
	onceBase.Do(func() {
		baseCtl, err = createBase(c...)
		if err != nil {
			panic(err)
		}
	})

	return baseCtl
}

func MustNotebookController(c ...string) *NotebookController {
	ctl, err := createNotebookController(c...)
	if err != nil {
		panic(err)
	}
	return ctl
}

func MustRegisterController(c ...string) *RegisterController {
	ctl, err := createRegisterController(c...)
	if err != nil {
		panic(err)
	}
	return ctl
}
